#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/pointing.h>

#define MOUSE 4
#define SCROLL 5
#define NUM 6

&mt {
    flavor = "balanced";
    quick-tap-ms = <0>;
};

/ {
    combos {
        compatible = "zmk,combos";

        tab {
            bindings = <&kp TAB>;
            key-positions = <11 12>;
        };

        shift_tab {
            bindings = <&kp LS(TAB)>;
            key-positions = <12 13>;
        };

        muhennkann {
            bindings = <&to_layer_0 INT_MUHENKAN>;
            key-positions = <11 10>;
        };

        double_quotation {
            bindings = <&kp DOUBLE_QUOTES>;
            key-positions = <20 21>;
        };

        eq {
            bindings = <&kp EQUAL>;
            key-positions = <24 25>;
        };
    };

    macros {
        to_layer_0: to_layer_0 {
            compatible = "zmk,behavior-macro-one-param";
            #binding-cells = <1>;
            bindings = <&to 0 &macro_param_1to1 &kp MACRO_PLACEHOLDER>;
            label = "TO_LAYER_0";
        };
    };

    behaviors {
        lt_to_layer_0: lt_to_layer_0 {
            compatible = "zmk,behavior-hold-tap";
            label = "LAYER_TAP_TO_0";
            bindings = <&mo>, <&to_layer_0>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            bindings = <
&kp Q             &kp W         &kp E             &kp R             &kp T                                                  &kp Y          &kp U  &kp I     &kp O     &lt 4 P
&kp A             &kp S         &kp D             &kp F             &kp G                &kp LS(LG(S))      &kp MINUS      &kp H          &kp J  &kp K     &kp L     &kp MINUS
&mt LEFT_SHIFT Z  &kp X         &kp C             &kp V             &kp B                &kp COLON          &kp SEMICOLON  &kp N          &kp M  &mkp MB1  &mkp MB2  &kp SLASH
&kp TAB           &kp LEFT_ALT  &kp LEFT_COMMAND  &lt 4 LANGUAGE_1  &lt 2 LANG_HIRAGANA  &lt 1 SPACE        &kp ENTER      &kp BACKSPACE                             &kp RIGHT_SHIFT
            >;

            sensor-bindings = <&inc_dec_kp PG_UP PAGE_DOWN>;
        };

        FUNCTION {
            bindings = <
&kp SLASH        &kp QUESTION   &kp NUMBER_1  &kp NUMBER_2      &kp NUMBER_3                                 &kp PLUS      &kp MINUS  &kp ASTERISK    &kp SLASH  &kp EQUAL
&kp EXCLAMATION  &kp COLON      &kp NUMBER_4  &kp N5            &kp NUMBER_6    &trans      &kp F13          &kp PIPE      &kp F7     &kp UP_ARROW    &kp F9     &kp LG(UP_ARROW)
&kp TILDE        &kp SEMICOLON  &kp N7        &kp N8            &kp N9          &trans      &trans           &kp LG(LEFT)  &kp LEFT   &kp DOWN_ARROW  &kp RIGHT  &kp LG(RIGHT)
&kp UNDERSCORE   &kp AT_SIGN    &kp N0        &kp LEFT_CONTROL  &kp LEFT_SHIFT  &trans      &kp RIGHT_SHIFT  &trans                                              &kp LG(DOWN_ARROW)
            >;
        };

        NUM {
            bindings = <
&kp LC(UP_ARROW)  &none  &kp LA(UP_ARROW)  &none          &kp LG(TAB)                                                    &kp LG(LS(Z))  &kp LG(F)      &kp LG(W)      &kp RA(RG(UP_ARROW))    &kp RIGHT_PARENTHESIS
&kp LG(A)         &none  &kp LA(DOWN)      &kp LG(T)      &kp LC(UP_ARROW)  &kp LC(LA(KP_NUMBER_0))      &kp UNDERSCORE  &kp LG(Z)      &kp LG(RIGHT)  &kp LG(LEFT)   &kp RA(RG(DOWN_ARROW))  &kp PERCENT
&none             &none  &none             &kp LA(SPACE)  &kp LA(TAB)       &kp EQUAL                    &trans          &kp LG(C)      &kp LG(V)      &kp LS(LG(V))  &none                   &kp BACKSLASH
&kp ESC           &none  &none             &trans         &trans            &trans                       &trans          &trans                                                               &kp PIPE
            >;
        };

        ARROW {
            bindings = <
&kp ESCAPE      &kp LC(LS(TAB))         &kp UP_ARROW    &kp LC(TAB)              &trans                       &trans  &trans  &trans  &trans  &trans
&kp HOME        &kp LEFT_ARROW          &kp DOWN_ARROW  &kp RIGHT_ARROW          &kp END  &trans      &trans  &trans  &trans  &trans  &trans  &trans
&kp LEFT_SHIFT  &kp LG(LS(LEFT_ARROW))  &trans          &kp LG(LS(RIGHT_ARROW))  &trans   &trans      &trans  &trans  &trans  &trans  &trans  &trans
&trans          &trans                  &trans          &trans                   &trans   &trans      &trans  &trans                          &trans
            >;

            sensor-bindings = <&inc_dec_kp LC(PAGE_UP) LC(PAGE_DOWN)>;
        };

        MOUSE {
            bindings = <
&kp C_VOLUME_UP    &trans  &kp LG(E)  &kp H   &kp LG(B)                      &bt BT_SEL 0  &bt BT_SEL 1  &trans    &trans    &trans
&kp C_VOLUME_DOWN  &trans  &trans     &trans  &trans     &trans      &trans  &trans        &mkp MB1      &mkp MB3  &mkp MB2  &trans
&trans             &trans  &trans     &trans  &trans     &trans      &trans  &trans        &trans        &trans    &trans    &trans
&trans             &trans  &trans     &trans  &trans     &trans      &trans  &trans                                          &trans
            >;
        };

        SCROLL {
            bindings = <
&trans  &trans  &trans  &trans  &trans                      &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans                          &trans
            >;
        };

        layer_6 {
            bindings = <
&trans  &trans        &trans        &trans        &trans                           &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4
&trans  &trans        &trans        &trans        &trans  &trans      &trans       &trans        &trans        &trans        &trans        &trans
&trans  &kp NUMBER_1  &kp NUMBER_2  &kp NUMBER_3  &trans  &trans      &bootloader  &trans        &trans        &trans        &trans        &bt BT_CLR
&trans  &trans        &trans        &trans        &trans  &trans      &trans       &trans                                                  &bt BT_CLR_ALL
            >;
        };
    };
};
